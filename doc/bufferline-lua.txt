*nvim-bufferline.lua*   For Neovim version 0.5+   Last change: 2021 January 19

A snazzy bufferline for neovim written in lua

Author: Akin Sowemimo

==============================================================================
CONTENTS                                      *bufferline-lua*
*bufferline-lua-contents*

Introduction...........................: |bufferline-lua-introduction|
Usage..................................: |bufferline-lua-usage|
Settings...............................: |bufferline-lua-settings|
LSP Diagnostics........................: |bufferline-lua-diagnostics|
Sorting................................: |bufferline-lua-sorting|
Filtering..............................: |bufferline-lua-filtering|
Pick...................................: |bufferline-lua-pick|
Multi-window...........................: |bufferline-lua-multiwindow|
Mappings...............................: |bufferline-lua-mapping|
Highlights.............................: |bufferline-lua-highlights|
Issues.................................: |bufferline-lua-issues|


==============================================================================
INTRODUCTION				        *bufferline-lua-introduction*

A _snazzy_ üíÖ buffer line (with minimal tab integration) for Neovim built
using `lua`.

This plugin shamelessly attempts to emulate the aesthetics of GUI text
editors/Doom Emacs. It was inspired by a screenshot of DOOM Emacs using
centaur tabs (https://github.com/ema2159/centaur-tabs). I don't intend to copy
all of it's functionality though.

==============================================================================
USAGE						        *bufferline-lua-usage*
You need to be using `termguicolors` for this plugin to work, as it reads the
hex `gui` color values of various highlight groups. >

    set termguicolors
    " In your init.vim or init.lua
    lua require"bufferline".setup{}
<
==============================================================================
SETTINGS					     *bufferline-lua-settings*

The available settings are: >

    require"bufferline".setup{
        options = {
            view = "multiwindow" | "default",
            numbers = "none" | "ordinal" | "buffer_id" | "both",
            number_style = "superscript" | "" | { "none", "subscript" }, -- buffer_id at index 1, ordinal at index 2
            mappings = true | false,
            buffer_close_icon= "Ôôï",
            modified_icon = "‚óè",
            close_icon = "ÔÄç",
            left_trunc_marker = "ÔÇ®",
            right_trunc_marker = "ÔÇ©",
            max_name_length = 18,
            max_prefix_length = 15, -- prefix used when a buffer is deduplicated
            tab_size = 18,
            diagnostics = false | "nvim_lsp"
            diagnostics_indicator = function(count, level)
            return "("..count..")"
            end
            show_buffer_close_icons = true | false,
            show_close_icon = true | false,
            show_tab_indicators = true | false
            persist_buffer_sort = true, -- whether or not custom sorted buffers should persist
            -- can also be a table containing 2 custom separators
            -- [focused and unfocused]. eg: { "|", "|" }
            separator_style = "slant" | "thick" | "thin" | { "any", "any" },
            enforce_regular_tabs = false | true,
            always_show_bufferline = true | false,
            sort_by = "extension" | "relative_directory" | "directory" | function(buffer_a, buffer_b)
            -- add custom logic
            return buffer_a.modified > buffer_b.modified
            end
        }
    }
<
==============================================================================
STYLING                                             *bufferline-styling*

You can change the appearance of the bufferline separators by setting the
`separator_style`. The available options are:
* `slant` - Use slanted/triangular separators
* `thick` - Increase the thickness of the separator characters
* `thin` - (default) Use thin separator characters
* finally you can pass in a custom list containing 2 characters which will be
  used as the separators e.g. `{"|", "|"}`, the first is the left and the
  second is the right separator

==============================================================================
LSP DIAGNOSTICS					    *bufferline-lua-diagnostics*

By setting `diagnostics = "nvim_lsp"` you will get an indicator in the
bufferline for a given tab if it has any errors This will allow you to
tell at a glance if a particular buffer has errors. Currently only the
native neovim lsp is supported, mainly because it has the easiest API for
fetching all errors for all buffers (with an attached lsp client) This
feature is _WIP_ so beware and report any issues if you find any.

In order to customise the appearance of the diagnostic count you can pass
a custom function in your setup.

>
    -- rest of config ...

    --- count is an integer representing total count of errors
    --- level is a string "error" | "warning"
    --- this should return a string
    --- Don't get too fancy as this function will be executed a lot
    diagnostics_indicator = function(count, level)
        local icon = level:match("error") and "ÔÅú " or "ÔÅ±"
        return " " .. icon .. count
    end
<

The highlighting for the filename if there is an error can be changed by
replacing the highlights for `error`, `error_visible`, `error_selected`,
`warning`, `warning_visible`, `warning_selected`.

==============================================================================
REGULAR TAB SIZES                                  *bufferline-lua-regular-tabs*

Generally this plugin enforces a minimum tab size so that the buffer line
appears consistent. Where a tab is smaller than the tab size it is padded.
If it is larger than the tab size it is allowed to grow up to the max name
length specified (+ the other indicators). If you set
`enforce_regular_tabs = true` tabs will be prevented from extending beyond
the tab size and all tabs will be the same length

NOTE: when this option is set to `true`. It will disable the ability to
deduplicate buffers.

==============================================================================
SORTING					               *bufferline-lua-sorting*

Bufferline allows you to sort the visible buffers by `extension` or `directory`: >

    " Using vim commands
    :BufferLineSortByExtension
    :BufferLineSortByDirectory

    -- Or using lua functions
    :lua require'bufferline'.sort_buffers_by('extension')`
    :lua require'bufferline'.sort_buffers_by('directory')`

For more advanced usage you can provide a custom compare function which
will receive two buffers to compare. You can see what fields
are available to use using >

    sort_by = function(buffer_a, buffer_b)
        print(vim.inspect(buffer_a))
        -- add custom logic
        return buffer_a.modified > buffer_b.modified
    end
<

When using a sorted bufferline it's advisable that you use the
`BufferLineCycleNext` and `BufferLineCyclePrev` commands since these will
traverse the bufferline bufferlist in order whereas `bnext` and `bprev` will
cycle buffers according to the buffer numbers given by vim.

==============================================================================
FILTERING                                           *bufferline-lua-filtering*

Bufferline can be configured to take a custom filtering function via the
`custom_filter` option. This value must be a lua function that will receive
each buffer number that is going to be used for the bufferline, as well as all the others.
A user can then check whatever they would like and return `true` if they would like it to
appear and `false` if not.
For example: >
    custom_filter = function(buf, buf_nums)
        -- dont show help buffers in the bufferline
        return not vim.bo[buf].filetype == "help" then

        -- you can use more custom logic for example
        -- don't show files matching a pattern
        return not vim.fn.bufname(buf):match('test')

        -- show only certain filetypes in certain tabs e.g. js in one, css in
        another etc.
        local tab_num = vim.fn.tabpagenr()
        if tab_num == 1 and vim.bo[buf].filetype == "javascript" then
            return true
        elseif tab_num == 2 and vim.bo[buf].filetype == "css" then
            return true
        else
            return false
        end


        -- My personal example:
        -- Don't show output log buffers in the same tab as my other code.
        -- 1. Check if there are any log buffers in the full list of buffers
        -- if not don't do any filtering
        local logs =
            vim.tbl_filter(
                function(b)
                    return vim.bo[b].filetype == "log"
                end,
                buf_nums
            )
        if vim.tbl_isempty(logs) then
            return true
        end
        -- 2. if there are log buffers then only show the log buffer
        local tab_num = vim.fn.tabpagenr()
        local is_log = vim.bo[buf].filetype == "log"
        -- only show log buffers in secondary tabs
        return (tab_num == 2 and is_log) or (tab_num ~= 2 and not is_log)
    end
<
==============================================================================
BUFFERLINE PICK                                            *bufferline-lua-pick*

Using the `BufferLinePick` command will allow for easy selection of a buffer
in view. Trigger the command, using `:BufferLinePick` or better still map this
to a key, e.g. >

    nnoremap <silent> gb :BufferLinePick<CR>
<
then pick a buffer by typing the character for that specific buffer that
appears

==============================================================================
MULTIWINDOW MODE                                    *bufferline-lua-multiwindow*

When this mode is active, for layouts of multiple windows in the tabpage, only
the buffers that are displayed in those windows are listed in the tabline.
That only applies to multi-window layouts, if there is only one window in the
tabpage, all buffers are listed.

==============================================================================
MAPPINGS                                               *bufferline-lua-mappings*

If the `mappings` option is set to `true`. `<leader>`1-9 mappings will be
created to navigate the first to the tenth buffer in the bufferline.

NOTE This is `false` by default.

If you'd rather map these yourself, use:

`vim nnoremap mymap :lua require"bufferline".go_to_buffer(num)<CR>`
You can close buffers by clicking the close icon or by _right clicking_ the tab anywhere


A few of this plugins commands can be mapped for ease of use. >

    " These commands will navigate through buffers in order
    " regardless of which mode you are using  e.g. if you change
    " the order of buffers :bnext and :bprevious will not respect the custom ordering
    nnoremap <silent>[b :BufferLineCycleNext<CR>
    nnoremap <silent>b] :BufferLineCyclePrev<CR>

    " These commands will move the current buffer backwards or forwards in the bufferline
    nnoremap <silent><mymap> :BufferLineMoveNext<CR>
    nnoremap <silent><mymap> :BufferLineMovePrev<CR>

    " These commands will sort buffers by directory, language, or a custom criteria
    nnoremap <silent>be :BufferLineSortByExtension<CR>
    nnoremap <silent>bd :BufferLineSortByDirectory<CR>
    nnoremap <silent><mymap> :lua require'bufferline'.sort_buffers_by(function (buf_a, buf_b) return buf_a.id < buf_b.id end)<CR>
<
==============================================================================
HIGHLIGHTS                                           *bufferline-lua-highlights*

This plugin is designed to work automatically, deriving colours from the
user's theme, you can change highlight groups by overriding the section you'd
like to change.

Keep in mind that despite my best efforts not to change these they might
require the occasional tweak (if you don't customise these too much you should
be fine ü§û).

Highlight values can also be specified as tables with a key of the highlight
name e.g. `Normal` and the attribute which is one of `fg`, `bg`. See the
`{what}` argument of `:h synIDAttr` for details, but only these 2 have been
tested

for example: >
    highlights = {
        fill = {
            guibg = {
                attribute = "fg",
                highlight = "Pmenu"
            }
        }
    }
<
This will automatically pull the value of `Pmenu` fg color and use it
Any improperly specified tables will be set to `nil` and overriden with the
default value for that key.

NOTE: you can specify colors the same way you specify `gui` colors for the
highlight command. See `:h highlight` .
    >
    lua require'bufferline'.setup{
        highlights = {
            fill = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>',
            },
            background = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>'
            },
            tab = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>'
            },
            tab_selected = {
                guifg = tabline_sel_bg,
                guibg = '<color-value-here>'
            },
            tab_close = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>'
            },
            buffer_visible = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>'
            },
            buffer_selected = {
                guifg = normal_fg,
                guibg = '<color-value-here>',
                gui = "bold,italic"
            },
            diagnostic = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
            },
            diagnostic_visible = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
            },
            diagnostic_selected = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                gui = "bold,italic"
            },
            info = {
                guifg = <color-value-here>,
                guisp = <color-value-here>,
                guibg = <color-value-here>
            },
            info_visible = {
                guifg = <color-value-here>,
                guibg = <color-value-here>
            },
            info_selected = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                gui = "bold,italic",
                guisp = <color-value-here>
            },
            info_diagnostic = {
                guifg = <color-value-here>,
                guisp = <color-value-here>,
                guibg = <color-value-here>
            },
            info_diagnostic_visible = {
                guifg = <color-value-here>,
                guibg = <color-value-here>
            },
            info_diagnostic_selected = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                gui = "bold,italic",
                guisp = <color-value-here>
            },
            warning = {
                guifg = <color-value-here>,
                guisp = <color-value-here>,
                guibg = <color-value-here>
            },
            warning_visible = {
                guifg = <color-value-here>,
                guibg = <color-value-here>
            },
            warning_selected = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                gui = "bold,italic",
                guisp = <color-value-here>
            },
            warning_diagnostic = {
                guifg = <color-value-here>,
                guisp = <color-value-here>,
                guibg = <color-value-here>
            },
            warning_diagnostic_visible = {
                guifg = <color-value-here>,
                guibg = <color-value-here>
            },
            warning_diagnostic_selected = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                gui = "bold,italic",
                guisp = warning_diagnostic_fg
            },
            error = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                guisp = <color-value-here>
            },
            error_visible = {
                guifg = <color-value-here>,
                guibg = <color-value-here>
            },
            error_selected = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                gui = "bold,italic",
                guisp = <color-value-here>
            },
            error_diagnostic = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                guisp = <color-value-here>
            },
            error_diagnostic_visible = {
                guifg = <color-value-here>,
                guibg = <color-value-here>
            },
            error_diagnostic_selected = {
                guifg = <color-value-here>,
                guibg = <color-value-here>,
                gui = "bold,italic",
                guisp = <color-value-here>
            },
            modified = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>'
            },
            modified_visible = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>'
            },
            modified_selected = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>'
            },
            duplicate_selected = {
                guifg = '<color-value-here>',
                gui = "italic",
                guibg = '<color-value-here>'
            },
            duplicate_visible = {
                guifg = '<color-value-here>',
                gui = "italic",
                guibg = '<color-value-here>'
            },
            duplicate = {
                guifg = '<color-value-here>',
                gui = "italic",
                guibg = '<color-value-here>'
            },
            separator_selected = {
                guifg = '<color-value-here>,
                guibg = '<color-value-here>'
            },
            separator_visible = {
                guifg = '<color-value-here>,
                guibg = '<color-value-here>'
            },
            separator = {
                guifg = '<color-value-here>,
                guibg = '<color-value-here>'
            },
            indicator_selected = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>'
            },
            pick_selected = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>',
                gui = "bold,italic"
            },
            pick_visible = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>',
                gui = "bold,italic"
            },
            pick = {
                guifg = '<color-value-here>',
                guibg = '<color-value-here>',
                gui = "bold,italic"
            }
        };
    }
<

==============================================================================
ISSUES							*bufferline-lua-issues*

Please raise any issues you encounter whilst using this plugin at:
https://github.com/akinsho/nvim-bufferline.lua/issues


vim:tw=78:sw=4:ft=help:norl:
